{"version":3,"file":"static/js/987.e46e031a.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/ContactForm/ContactForm.jsx","../node_modules/nanoid/index.browser.js","components/Section/Section.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts, selectFilters } from '../../redux/auth/selectors';\nimport { deleteContacts } from '../../redux/contacts/ContactsThunk';\n\nexport const ContactList = () => {\n  const items = useSelector(selectContacts);\n  const filter = useSelector(selectFilters);\n  const dispatch = useDispatch();\n  const filteredContacts = items.filter(item =>\n    item.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const handleContactDelete = contactId => {\n    dispatch(deleteContacts(contactId));\n  };\n\n  return (\n    <div>\n      <ul className=\"contact-list\">\n        {filteredContacts.map(contact => (\n          <li key={contact.id} className=\"contact-list-item\">\n            {contact.name}: {contact.number}\n            <button\n              type=\"button\"\n              className=\"delete-button\"\n              onClick={() => handleContactDelete(contact.id)}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/filtered';\nimport '../../index.css';\nimport { selectFilters } from '../../redux/auth/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilters);\n\n  const handleFilterChange = evt => {\n    dispatch(setFilter(evt.target.value));\n  };\n\n  return (\n    <input\n      type=\"text\"\n      value={filter}\n      onChange={handleFilterChange}\n      className=\"filter-input\"\n      placeholder=\"Search contacts by name\"\n    />\n  );\n};\n","import { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContacts } from '../../redux/contacts/ContactsThunk';\nimport '../../index.css';\nimport { selectContacts } from '../../redux/auth/selectors';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const id = nanoid();\n    const newContact = { id, name, number };\n\n    addUserContact(newContact);\n\n    setName('');\n    setNumber('');\n  };\n\n  const handleInputChange = evt => {\n    const inputName = evt.target.name;\n\n    switch (inputName) {\n      case 'name':\n        setName(evt.target.value);\n        break;\n      case 'number':\n        setNumber(evt.target.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const addUserContact = newContact => {\n    const nameExists = contacts.some(\n      contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n    );\n    if (nameExists) {\n      alert(`\"${newContact.name}\" вже є в списку контактів.`);\n    } else {\n      dispatch(addContacts(newContact));\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"contact-form\">\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={handleInputChange}\n        placeholder=\"Joe Biden\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces...\"\n        required\n      />\n      <input\n        type=\"text\"\n        name=\"number\"\n        value={number}\n        onChange={handleInputChange}\n        placeholder=\"696-96-96\"\n        pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}...\"\n        title=\"Phone number must be digits and can contain spaces, dashes...\"\n        required\n      />\n      <button type=\"submit\" className=\"submit-button\">\n        Add Contact\n      </button>\n    </form>\n  );\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import PropTypes from 'prop-types';\nimport '../../index.css';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <section>\n      {title && <h3 className=\"section-title\">{title}</h3>}\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import { ContactList } from '../../components/ContactList/ContactList';\nimport { Filter } from '../../components/Filter/Filter';\nimport { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { Section } from 'components/Section/Section';\nimport { fetchContacts } from 'redux/contacts/ContactsThunk';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Section title=\"PhoneBook\">\n        <ContactForm />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n        <ContactList />\n      </Section>\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactList","items","useSelector","selectContacts","filter","selectFilters","dispatch","useDispatch","filteredContacts","item","name","toLowerCase","includes","className","map","contact","number","type","onClick","contactId","id","deleteContacts","Filter","value","onChange","evt","setFilter","target","placeholder","ContactForm","useState","setName","setNumber","contacts","handleInputChange","addUserContact","newContact","some","alert","addContacts","onSubmit","preventDefault","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","pattern","title","required","Section","children","useEffect","fetchContacts"],"sourceRoot":""}